#include <Keypad.h>
#include <TM1637Display.h>

// Keypad setup
const byte ROWS = 4; // Four rows
const byte COLS = 4; // Four columns
char keys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};
byte rowPins[ROWS] = {2, 3, 4, 5};   // Connect to the row pinouts of the keypad
byte colPins[COLS] = {6, 7, 8, 9};   // Connect to the column pinouts of the keypad

Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

// TM1637 display setup
#define CLK 10
#define DIO 11
TM1637Display display(CLK, DIO);

// LEDs
#define GREEN_LED 12
#define RED_LED 13

// Predefined password
char correctPassword[5] = "1234";   // The correct 4-digit password
char enteredPassword[5];            // Store the entered password (4 digits + null terminator)
int passwordIndex = 0;              // Index to track entered digits

void setup() {
  Serial.begin(9600);
  display.setBrightness(0x0f);  // Set display brightness (max)
  display.clear();              // Clear display
  
  // Set LED pins as output
  pinMode(GREEN_LED, OUTPUT);
  pinMode(RED_LED, OUTPUT);

  // Initially turn off both LEDs
  digitalWrite(GREEN_LED, LOW);
  digitalWrite(RED_LED, LOW);
}

void loop() {
  char key = keypad.getKey();   // Read the key pressed
  
  if (key) {
    Serial.println(key);        // Print the key to the serial monitor
    
    // Check if the entered key is a digit (0-9)
    if (key >= '0' && key <= '9' && passwordIndex < 4) {
      enteredPassword[passwordIndex] = key;  // Store the entered digit
      passwordIndex++;                        // Move to the next position

      // Show entered digits on TM1637 (replace remaining digits with dashes)
      int displayValue = 0;
      for (int i = 0; i < passwordIndex; i++) {
        displayValue = displayValue * 10 + (enteredPassword[i] - '0');
      }
      display.showNumberDec(displayValue, false, passwordIndex, 0);  // Show entered digits

      // If 4 digits have been entered, check the password
      if (passwordIndex == 4) {
        enteredPassword[4] = '\0';   // Null-terminate the entered password
        
        // Compare entered password with correct password
        if (strcmp(enteredPassword, correctPassword) == 0) {
          display.showNumberDec(8888);  // Display PASS
          digitalWrite(GREEN_LED, HIGH);  // Turn on green LED
          digitalWrite(RED_LED, LOW);     // Turn off red LED
        } else {
          display.showNumberDec(9999);  // Display FAIL
          digitalWrite(RED_LED, HIGH);   // Turn on red LED
          digitalWrite(GREEN_LED, LOW);  // Turn off green LED
        }
        delay(2000);  // Wait for 2 seconds
        display.clear();  // Clear the display

        // Turn off both LEDs after delay
        digitalWrite(GREEN_LED, LOW);
        digitalWrite(RED_LED, LOW);

        passwordIndex = 0;  // Reset for the next entry
      }
    }
    
    // '*' can be used to clear the entered digits
    if (key == '*') {
      passwordIndex = 0;   // Reset index to start entering digits again
      display.clear();     // Clear the display
    }
  }
}
